{"data":{"site":{"siteMetadata":{"title":"现代前端开发","author":"程序员Xiaoxiong"}},"markdownRemark":{"id":"b21447ed-5646-5eab-a18a-4eb3eebc3d01","html":"<h2>为什么需要在 React 类组件中为事件处理程序绑定 this</h2>\n<p><a href=\"https://juejin.im/post/5afa6e2f6fb9a07aa2137f51\">https://juejin.im/post/5afa6e2f6fb9a07aa2137f51</a></p>\n<p>讲的很透彻，总结：</p>\n<p>在 React 的类组件中，当我们把事件处理函数引用作为回调传递过去，如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button type=&quot;button&quot; onClick={this.handleClick}&gt;Click Me&lt;/button&gt;</code></pre></div>\n<p>事件处理程序方法会丢失其<strong>隐式绑定</strong>的上下文。当事件被触发并且处理程序被调用时，<code class=\"language-text\">this</code>的值会回退到<strong>默认绑定</strong>，即值为 <code class=\"language-text\">undefined</code>，这是因为类声明和原型方法是以严格模式运行。</p>\n<p>当我们将事件处理程序的 <code class=\"language-text\">this</code> 绑定到构造函数中的组件实例时，我们可以将它作为回调传递，而不用担心会丢失它的上下文。</p>\n<p>箭头函数可以免除这种行为，因为它使用的是<strong>词法</strong> <code class=\"language-text\">this</code> <strong>绑定</strong>，会将其自动绑定到定义他们的函数上下文。</p>\n<h2>如何获取node 命令 cli 参数</h2>\n<p><code class=\"language-text\">process.argv</code>这个数组包含了从命令行传进来的数组</p>\n<p>最简单的使用方法，对于一个有参数的命令，我们在js文件中这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">process.argv[process.argv.indexOf(&quot;--post&quot;) + 1]</code></pre></div>\n<p>使用： </p>\n<p><code class=\"language-text\">npm run new-post --post test</code></p>\n<p>这样可以取到 —post 的参数值为 <code class=\"language-text\">test</code></p>\n<p>当然这样存在一定缺陷，可以适当再完善一下。</p>","frontmatter":{"title":"2019-2-25","date":"February 24, 2019"}}},"pageContext":{"slug":"/daily/2019-2-25/2019-2-25/"}}